<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Parameter Manager" Height="650" Width="1050"
        WindowStartupLocation="CenterScreen"
        Background="#F5F5F5">
    <Window.Resources>
        <!-- Define common styles -->
        <SolidColorBrush x:Key="AccentBrush" Color="#26A69A"/>
        <SolidColorBrush x:Key="AccentHoverBrush" Color="#00897B"/>
        <SolidColorBrush x:Key="TextBrush" Color="#333333"/>
        <SolidColorBrush x:Key="SharedParameterHighlightBrush" Color="#E0F7FA"/>
        <SolidColorBrush x:Key="SelectedRowBrush" Color="#B2DFDB"/>

        <!-- Style for Buttons -->
        <Style TargetType="Button">
            <Setter Property="Background" Value="{StaticResource AccentBrush}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderBrush" Value="{StaticResource AccentBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                                              Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource AccentHoverBrush}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource AccentHoverBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#00695C"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style for Labels -->
        <Style TargetType="Label">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontSize" Value="13"/>
        </Style>

        <!-- Style for CheckBoxes -->
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

        <!-- Style for TextBox -->
        <Style TargetType="TextBox">
            <Setter Property="BorderBrush" Value="#B0BEC5"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource AccentBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style for DataGrid -->
        <Style TargetType="DataGrid">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#B0BEC5"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="RowBackground" Value="White"/>
            <Setter Property="AlternatingRowBackground" Value="#FAFAFA"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="GridLinesVisibility" Value="Horizontal"/>
            <Setter Property="HorizontalGridLinesBrush" Value="#E0E0E0"/>
            <Setter Property="RowHeight" Value="28"/>
        </Style>

        <!-- Style for DataGrid Column Headers -->
        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="#ECEFF1"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="BorderBrush" Value="#B0BEC5"/>
            <Setter Property="BorderThickness" Value="0,0,1,1"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="FontWeight" Value="Medium"/>
        </Style>

        <!-- Style for DataGrid Cells -->
        <Style TargetType="DataGridCell">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="5,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="DataGridCell">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style for DataGrid Rows -->
        <Style TargetType="DataGridRow">
            <Setter Property="Background" Value="Transparent"/>
            <Style.Triggers>
                <!-- Highlight Shared Parameters -->
                <DataTrigger Binding="{Binding Type}" Value="Shared Parameter">
                    <Setter Property="Background" Value="{StaticResource SharedParameterHighlightBrush}"/>
                </DataTrigger>
                <!-- Selected Row Style (has higher precedence) -->
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{StaticResource SelectedRowBrush}"/>
                    <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
                </Trigger>
                <!-- Hover Effect -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E0E0E0"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Top Row: Show Existing & Search -->
        <Grid Grid.Row="0" VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <CheckBox x:Name="chkShowExisting" Content="Show Existing Parameters" Margin="0,0,30,0" IsChecked="True" Grid.Column="0"/>
            <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Center" Margin="10,0,0,0">
                <Label Content="Search Parameter Name" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <TextBox x:Name="txtSearch" Width="220" Height="26" VerticalContentAlignment="Center"/>
            </StackPanel>
        </Grid>

        <!-- Row 1: All Checkbox, Add Parameter, Export Buttons -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Center" Margin="0,5,0,5">
            <CheckBox x:Name="chkAll" Content="All" Width="60"/>
            <Button x:Name="btnAddParameter" Content="Add Parameter" Width="120" Margin="20,0,0,0"/>
            <Button x:Name="btnExport" Content="Export" Width="75" Margin="10,0,0,0"/>
            <Button x:Name="btnImport" Content="Import" Width="75" Margin="10,0,0,0"/>
            <Button x:Name="btnRemoveParameter" Content="Delete Parameter" Width="140" Margin="10,0,0,0"/>
        </StackPanel>

        <!-- Row 2: DataGrid showing parameters -->
        <DataGrid x:Name="dataGrid" Grid.Row="2" AutoGenerateColumns="False" CanUserAddRows="False" Margin="0,5,0,5" IsReadOnly="False">
            <DataGrid.Columns>
                <DataGridCheckBoxColumn Header="#" Binding="{Binding IsSelected, Mode=TwoWay}" Width="30"/>
                <DataGridTextColumn Header="Parameter Name" Binding="{Binding Name}" IsReadOnly="True" Width="180"/>
                <DataGridTextColumn Header="Type of Parameter" Binding="{Binding Type}" IsReadOnly="True" Width="120"/>
                <DataGridTextColumn Header="Discipline" Binding="{Binding Discipline}" IsReadOnly="True" Width="110"/>
                <DataGridTextColumn Header="Type" Binding="{Binding PType}" IsReadOnly="True" Width="80"/>
                <DataGridTextColumn Header="Group Under" Binding="{Binding GroupUnder}" IsReadOnly="True" Width="100"/>
                <DataGridTextColumn Header="Instance/Type" Binding="{Binding InstType}" IsReadOnly="True" Width="100"/>

                <!-- Dynamic Value Column: ComboBox if Options exist, TextBox otherwise -->
                <DataGridTemplateColumn Header="Value" Width="180">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="Height" Value="22"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Options.Count}" Value="0">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Options}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                    <Style TargetType="TextBox">
                                        <Setter Property="Height" Value="22"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Options.Count}" Value="0">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Options}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Options.Count}" Value="1">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Resources>
                                <ComboBox ItemsSource="{Binding Options}"
                                          SelectedItem="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                          VerticalContentAlignment="Center"/>
                                <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                         VerticalContentAlignment="Center"/>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Row 3: Apply to All Similar Instances Checkbox -->
        <CheckBox x:Name="chkApplyAllSimilar" Content="Apply value to all similar instances in project" Grid.Row="3" Margin="0,2,0,2"/>

        <!-- Row 4: Apply and Cancel Buttons -->
        <StackPanel Orientation="Horizontal" Grid.Row="4" HorizontalAlignment="Right" Margin="0,12,0,0">
            <Button x:Name="btnApply" Content="Apply" Width="80" Margin="0,0,10,0"/>
            <Button x:Name="btnCancel" Content="Cancel" Width="80"/>
        </StackPanel>
    </Grid>
</Window>